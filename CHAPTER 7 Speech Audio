from keras.layers import Activation, Dense, Dropout, Conv2D,Flatten, MaxPooling2D
from keras.models import Sequential
import librosa
import librosa.display
import numpy as np
import random

 

# A list used to store the data we will use to test and     
# train the model

D = [] 


# Fill the list called D with audio matrices and 
# corresponding numbers ( 1 for Eva or 2 for Joe)

for x in range(40):
    
    y, sr = librosa.load('C:/audio files/folderEva/'  +\
    str(x)+'.wav', duration=2.95)     
    
    ps = librosa.feature.melspectrogram(y=y, sr=sr)
    
    if ps.shape != (128, 128): continue
    D.append( (ps, 1) )



for x in range(40):
    
    y, sr = librosa.load('C:/audio files/folderJoe/' +\
    str(x)+'.wav', duration=2.95)   
    
    ps = librosa.feature.melspectrogram(y=y, sr=sr)
    if ps.shape != (128, 128): continue
    D.append( (ps, 2) )


random.shuffle(D)

train = D[:40]
test = D[40:]
x_train, y_train = zip(*train)
x_test, y_test = zip(*test)

print(y_train)
print(y_test)
print(x_train)
print(x_test)


# We need to reshape for CNN input in order to enter it to # the model

x_train = np.array([x.reshape( (128, 128, 1) ) for x in\
x_train])
x_test = np.array([x.reshape( (128, 128, 1) ) for x in\
x_test])


y_train = np.array(y_train) 
y_test = np.array(y_test)



model = Sequential()
input_shape=(128, 128, 1)
model.add(Conv2D(30, (5, 5), strides=(1, 1), input_shape=input_shape))
model.add(MaxPooling2D((2, 1), strides=(1, 1)))
model.add(Activation('relu'))

model.add(Conv2D(50, (5, 5), padding="valid"))
model.add(MaxPooling2D((2, 1), strides=(1, 1)))
model.add(Activation('relu'))

model.add(Conv2D(50, (2, 2), padding="valid"))
model.add(Activation('relu'))

model.add(Flatten())
model.add(Dropout(rate=0.2))

model.add(Dense(80))
model.add(Activation('relu'))
model.add(Dropout(rate=0.5))

model.add(Dense(1))
model.add(Activation('softmax'))
model.compile(
	optimizer="Adam",
	loss="categorical_crossentropy",
	metrics=['accuracy'])
model.fit(
	x=x_train, 
	y=y_train,
    epochs=10,
    batch_size=5,
    validation_data= (x_test, y_test))

score = model.evaluate(
	x=x_test,
	y=y_test)

print('Test loss:', score[0])
print('Test accuracy:', score[1])


#Use the predict function to see if the network will output 
#a “1” after we input a spectrogram matrix of a totally new
# sample of Eva’s voice

y, sr = librosa.load('C:/audio files/New_Eva.wav', duration=2.97)

ps = librosa.feature.melspectrogram(y=y, sr=sr)

ps = np.array([ps.reshape( (128, 128, 1) )])

voice_pred=model.predict(ps, verbose = 0)
print (voice_pred)
