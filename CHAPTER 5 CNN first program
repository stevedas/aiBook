import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
from keras.datasets import cifar10

(X_train, Y_train), (X_test, Y_test) = cifar10.load_data()

# Transform pixel values to be between 0 and 1
X_train, X_test = X_train/255.0, X_test/255.0

# The first layer will have 50 filters. The filter size is 2 X 2
# Max pooling is then used to reduce the spatial dimensions of 
#  the output volume on the next line.
CNN_model = models.Sequential()
CNN_model.add(layers.Conv2D(50, (2, 2), activation='relu',\
input_shape=(32, 32, 3)))
CNN_model.add(layers.MaxPooling2D((3, 3)))
CNN_model.add(layers.Flatten())
CNN_model.add(layers.Dense(50, activation='relu'))
CNN_model.add(layers.Dropout(.1))
CNN_model.add(layers.Dense(10, activation='softmax'))


optimizer = tf.optimizers.Adam(learning_rate = .005)
CNN_model.compile(optimizer=optimizer,
                  
          loss=tf.keras.losses.SparseCategoricalCrossentropy
         (from_logits=False),metrics=['accuracy'])

history = CNN_model.fit(X_train, Y_train, epochs=5, 
          validation_data=( X_test, Y_test))


#Evaluate the model
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='upper left')
test_loss, test_acc = CNN_model.evaluate(X_test,  Y_test,\
verbose=2)
print(test_acc)


#show model’s structure
CNN_model.summary()

#create an array that predicts what the category of each image #from the test_image array and then print out the prediction for #the 10th image. (predictions[9]) refers to the #10th image since #the #index of an array in python starts with 0.
predictions = CNN_model.predict(X_test)
tenth_prediction = (predictions[9])
print(tenth_prediction)

#The output from the code above consists of probability #distributions between zero and 
#one. 

import numpy as np
#print out the index of the array which contains the highest #probability distribution
prediction = (np.argmax(predictions[9]))
print(prediction)


#The index with the highest number will be the 
#predicted output. 
#The indexes of our input data are as follows:

#  0	airplane
#  1	automobile
#  2	bird
#  3	cat
#  4	deer
#  5	dog
#  6	frog
#  7	horse
#  8	ship
#  9	truck

#so if the returned index is 0, then the CNN categorized the #inputted  image as an “airplane”

plt.figure()
plt.imshow(X_test[9])
plt.colorbar()
plt.grid(False)
plt.show()
